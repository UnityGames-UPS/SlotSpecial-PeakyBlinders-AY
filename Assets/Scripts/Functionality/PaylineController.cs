using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.UI.Extensions;

public class PaylineController : MonoBehaviour
{
    [SerializeField] private int x_Distance;
    [SerializeField] private int y_Distance;
    [SerializeField] private Transform LineContainer;
    [SerializeField] private UILineRenderer Line_Prefab;
    [SerializeField] private List<PaylineBtnView> paylineButtons;
    [SerializeField] private Vector2 InitialLinePosition = new Vector2(-315, 100);
    GameObject TempObj = null;
    [SerializeField]List<GameObject> dontDestroyLines= new List<GameObject>();

    internal List<List<int>> paylines=new List<List<int>>();

    void Start()
    {

        // SetButtons();


    }
    //generate lines at runtime accordingly
    internal void GeneratePayoutLinesBackend(List<int> y_index, int Count, bool isStatic = false)
    {
        GameObject MyLineObj = Instantiate(Line_Prefab.gameObject, LineContainer);
        MyLineObj.transform.localPosition = new Vector2(InitialLinePosition.x, InitialLinePosition.y);
        UILineRenderer MyLine = MyLineObj.GetComponent<UILineRenderer>();

        for (int i = 0; i < Count; i++)
        {
            var points = new Vector2() { x = i * x_Distance, y = y_index[i] * -y_Distance };
            var pointlist = new List<Vector2>(MyLine.Points);
            pointlist.Add(points);
            MyLine.Points = pointlist.ToArray();
        }
        var newpointlist = new List<Vector2>(MyLine.Points);
        newpointlist.RemoveAt(0);
        MyLine.Points = newpointlist.ToArray();

        if (isStatic)
        {
            TempObj = MyLineObj;
        }
    }

    internal void GeneratePayline( int lineId, bool destroy=true)
    {
        UILineRenderer line = Instantiate(Line_Prefab, LineContainer);
        if(!destroy)
        dontDestroyLines.Add(line.gameObject);
        line.transform.localPosition = new Vector2(InitialLinePosition.x, InitialLinePosition.y);
        var pointlist = new List<Vector2>();
        Vector2 points = new Vector2(0, 0);

        for (int j = 0; j < paylines[lineId].Count; j++)
        {
            points.x = j * x_Distance;
            points.y = paylines[lineId][j] * -y_Distance;
            pointlist.Add(points);
        }
        line.Points = pointlist.ToArray();


    }

    //delete the line generated by button hover
    internal void ResetStaticLine()
    {
        if (TempObj != null)
        {
            Destroy(TempObj);
            TempObj = null;
        }
    }

    //delete all lines
    internal void ResetLines(bool hardReset=false)
    {
        foreach (Transform child in LineContainer)
        {
            if(hardReset){
            Destroy(child.gameObject);

            }else if(!dontDestroyLines.Contains(child.gameObject)){
                 Destroy(child.gameObject);
            }
        }
    }

    internal void SetButtons()
    {
        int count = paylineButtons.Count;
        for (int i = 0; i < count; i++)
        {
            // Get a random index from the remaining elements
            int randomIndex = Random.Range(i, count);
            (paylineButtons[i], paylineButtons[randomIndex]) = (paylineButtons[randomIndex], paylineButtons[i]);
        }

        for (int i = 0; i < count; i++)
        {
            paylineButtons[i].SetIdAndText(i);
            paylineButtons[i].OnHover=OnHover;
            paylineButtons[i].OnExit=ResetLines;

        }

    }

    void OnHover(int id){

        ResetLines();
        GeneratePayline(id);

    }

}
